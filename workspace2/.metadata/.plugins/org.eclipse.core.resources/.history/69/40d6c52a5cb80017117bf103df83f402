package com.dlut.cmh.practice;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class Main {
    public static boolean solution(List<Integer> l1, List<Integer> l2) {
        if (l1 == null || l2 == null || l1.size() == 0 || l2.size() == 0) {
            return false;
        }
        LinkedList<Integer> stack = new LinkedList<>();
        int i1 = 0;
        int i2 = 0;
        stack.push(l1.get(i1++));
        while (i2 != l2.size()) {
            int cur = l2.get(i2++);
            while (i1 != l1.size() && stack.peek() != cur) {
                stack.push(l1.get(i1++));
            }
            if (stack.peek() == cur) {
                stack.pop();
            } else {
                return false;
            }
        }
        return true;
    }
    public static void main(String[] args) {
        List<Integer> l1 = new ArrayList<>();
        List<Integer> l2 = new ArrayList<>();
        l1.add(1);
        l1.add(2);
        l1.add(3);
        l1.add(4);
        l1.add(5);
        
        
        l2.add(4);
        l2.add(3);
        l2.add(5);
        l2.add(1);
        l2.add(2);
        System.out.println(solution(l1, l2));
    }
}
