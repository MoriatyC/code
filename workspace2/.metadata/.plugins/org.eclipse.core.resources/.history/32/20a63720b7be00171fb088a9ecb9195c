package first_maven;

import java.util.ArrayList;
import java.util.List;

public class Main{

    public static void combination(String s) {
        List<String> ret = new ArrayList<>();
        for (int i = 1; i <= s.length(); i++) {
            combination(s, i, ret);
        }
    }
    public static void combination(String s, int m, List<String> result) {  
        
        // 如果m==0，则递归结束。输出当前结果  
        if (m == 0) {  
            for (int i = 0; i < result.size(); i++) {  
                System.out.print(result.get(i));  
            }  
            System.out.println();  
            return;  
        }  
  
        if (s.length() != 0) {  
            // 选择当前元素  
            result.add(s.charAt(0) + "");  
            perm(s.substring(1, s.length()), m - 1, result);  
            result.remove(result.size() - 1);//注意：递归出栈时需要移除List中的字符组合  
            // 不选当前元素  
            perm(s.substring(1, s.length()), m, result);  
        }  
    }  
    public static void main(String[] args) {
        int n = 5;
        int m = 3;
        int[][] dp = new int[6][4];
        for (int i = 1; i <= 5; i++) {
            dp[i][1] = i;
        }
        for (int i = 1; i <= 5; i++) {
            for (int j = 2; j <= i - 1; j++) {
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
            }
        }
        int sum = 0;
        for (int i = 1; i <= 5; i++) {
            
        }
    }
}
