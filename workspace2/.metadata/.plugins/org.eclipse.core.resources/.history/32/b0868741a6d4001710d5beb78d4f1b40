package first_maven;

import java.text.ParseException;
import java.util.HashMap;
import java.util.Map;

public class Main{
    public static int GetNumberOfK(int [] array , int k) {
        if (array == null || array.length == 0) {
            return 0;
        } 
        int first = findFirst(array, k, 0, array.length- 1);
        if (first == -1) {
            return 0;
        }
        int last = findLast(array, k, 0, array.length - 1);
        return last - first + 1;
    }
    public static int findFirst(int[] array, int k, int left, int right) {
        if (left > right) {
            return -1;
        }
        int mid = left + (right - left) / 2;
        if (array[mid] == k) {
            if (0 == mid || array[mid - 1] != k) {
                return mid;
            }
            right = mid - 1;
        } else if (array[mid] > k) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
        return findFirst(array, k, left, right);
    }
    public static int findLast(int[] array, int k, int left, int right) {
        if (left > right) {
            return 0;
        }
        int mid = left + (right - left) / 2;
        if (array[mid] == k) {
            if (array.length - 1 == mid || array[mid + 1] != k) {
                return mid;
            }
            left = mid + 1;
        } else if (array[mid] > k) {
            right = mid - 1;
        } else {
            left = mid + 1;
        }
        return findLast(array, k, left, right);
    }
    public static void solution(int n, int[] sum, Map<Integer, Integer> map) {
        if (n < 0) {
            return;
        }
        if (n == 0) {
            map.put(sum[0], map.getOrDefault(sum[0], 0) + 1);
        }
        for (int i = 1; i <= 6; i++) {
            sum[0] += i;
            solution(n - 1, sum, map);
            sum[0] -= i;
        }
        
    }
    public static void main(String[] args) throws ParseException {
        Map<Integer, Integer> map = new HashMap<>();
        int[] sum = {0};
        solution(3, sum, map);
        int x = (int)Math.pow(6, 3);
        for (int i : map.keySet()) {
            System.out.println(i + "  " + map.get(i) / );
        }
    }
}
