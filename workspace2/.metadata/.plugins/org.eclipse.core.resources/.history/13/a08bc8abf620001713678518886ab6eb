package first_maven;

import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int Q = sc.nextInt();
        int[] a = new int[1005];
        int[][] dp = new int[1005][1005];//dp【i】【j】答错I答对J最好记录
        int canPass, n, m, s, t;
        int q = sc.nextInt();

        while (q-- > 0) {

          n = sc.nextInt();//总关卡
         m = sc.nextInt();//答题机会
          s = sc.nextInt();//right
          t = sc.nextInt();//wrong
          for(int i = 1; i <= n; i++)
            {
            	for(int j = 0; j <= m; j++)
            		dp[i][j] = Integer.MAX_VALUE;
            }
            //输入每关卡所需点数
            for (int i = 1; i <= n; i++) a[i]=sc.nextInt();
            //方便计算，第0行置0
            for (int i = 0; i <= m; i++) dp[0][i] = 0;
            for (int i = 1; i <= n; i++) {
                //all 无错答通关时所需答对的题数
                int all = (a [i] % s == 0) ? a[i] / s : a[i] / s + 1;
                for (int j = 0; j <= all; j++) {
                    //x 答对题数j不同时的答错题数
                    int x = a[i] - j * s;
                    if (x > 0) x = (x % t == 0) ? x / t : x / t + 1;
                    //注意x为负数时需置为0
                    else x = 0;
                    //DP的意思是：前i关的答对题数 = min{前i-1关答错了k道题的情况下的答对题数 + 第i关的答对题数}
                    for (int k = 0; j + x + k <= m; k++) {
                        dp[i][j + k + x] = Math.min(dp[i][j + k + x], dp[i - 1][k] + j);
                    }
                }
            }
            int ans = Integer.MAX_VALUE;
            //得到最后一关的最少答对题数
            for (int i = 0; i <= m; i++) {
                ans = Math.min(ans, dp[n][i]);
            }
            if (ans <= m) System.out.println(ans);
            else System.out.println("No");
        }
//        while(Q-- > 0)
//        {
//            N = sc.nextInt();//总关卡
//            M = sc.nextInt();//答题机会
//            S = sc.nextInt();//right
//            T = sc.nextInt();//wrong
//            for(int i = 1; i <= N; i++)
//            {
//            	for(int j = 0; j <= M; j++)
//            		dp[i][j] = Integer.MAX_VALUE;
//            }
//            for(int i = 1; i <= N; i++)
//            {
//                A[i] = sc.nextInt();
//                canPass = (int)Math.ceil(1.0 * A[i] / S);//每关最多答对题数
//                for(int j = 0; j <= canPass; j++)
//                {
//                	int rest = A[i] - j * S;//当前level剩下的分数
//                	if(rest > 0)
//                	{
//                		rest = (int)Math.ceil(1.0 * rest / T);//rest 答错题目数
//                	}
//                	else
//                		rest = 0;
//                	for (int k = 0; j + rest + k <= M  ; ++k)  
//                    {  //i 关 j 答对题目  
////                		g[i][j] = max{g[i-1][j] + T, g[i][j-1] + S}
//                        dp[i][j + rest + k] = Math.min (dp[i][j + rest + k], dp[i-1][k]+j );  
////                        System.out.println("i"+i+"j+rest+k"+(j+rest+k)+"   "+dp[i][j + rest + k]);
//                    } 
//                }
//            }
//            int ret = Integer.MAX_VALUE;
//            for(int i = 0; i <= M; i++)
//            {
//            	ret = Math.min(ret, dp[N][i]);
//            }
//            if(ret <= M)
//            	System.out.println(ret);
//            else
//            	System.out.println("No");
//            
//        }
    }
}