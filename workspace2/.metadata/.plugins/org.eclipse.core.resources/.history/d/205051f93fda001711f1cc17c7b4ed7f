package first_maven;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode(int x) { val = x; }
 }

public class TreeDemo {
    static boolean getPath(TreeNode root, List<TreeNode> list, TreeNode p) {
        if (root == null) {
            return false;
        }
        boolean find = true;
        System.out.println("in" + root.val);
        list.add(root);
        if (root.val != p.val) {
           find = getPath(root.left, list, p) || getPath(root.right, list, p);
            if (!find) {
                list.remove(list.size() - 1);
                System.out.println("out " + root.val);
            }
        }
        return find;
        
        
    }
    static TreeNode  getLastCommon(List<TreeNode> list1, List<TreeNode> list2) {
        TreeNode ret = list1.get(0);
        for (int i = 1; i < list1.size() && i < list2.size(); i++) {
            if (list1.get(i).val != list2.get(i).val) {
                break;
            }
            ret = list1.get(i);
        }
        return ret;
    }
    public static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || p == null || q == null) {
            return null;
        }
        List<TreeNode> list1 = new ArrayList<>();
        List<TreeNode> list2 = new ArrayList<>();
        getPath(root, list1, p);
        getPath(root, list2, q);
        for (TreeNode i : list1) {
            System.out.println(i.val);
        }
        System.out.println();
        for (TreeNode i : list2) {
            System.out.println(i.val);
        }
        return getLastCommon(list1, list2);
    }
    
    public static void main(String[] args) {
        TreeNode a1 = new TreeNode(-1);
        TreeNode a2 = new TreeNode(0);
        TreeNode a3 = new TreeNode(3);
        TreeNode a4 = new TreeNode(-2);
        TreeNode a5 = new TreeNode(4);
        TreeNode a6 = new TreeNode(8);
        a1.left = a2;
        a1.right = a3;
        a2.left = a4;
        a2.right = a5;
        a4.left = a6;
        TreeNode ret = lowestCommonAncestor(a1, a5, a6);
//        System.out.println(ret.val);
      
       
    }

}
