package first_maven;

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Future;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

public class Main extends ThreadPoolExecutor{
    
    
    
    public static class DivTask implements Runnable{
        int a, b;
        public DivTask(int a, int b) {
            this.a = a;
            this.b = b;
        }
        @Override
        public void run() {
            int ret = a / b;
            System.out.println(ret);
        }
        
    }
    
    
    
    
    

    public Main(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
            BlockingQueue<Runnable> workQueue) {
        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);
    }
    
    @Override
    public void execute(Runnable task) {
        super.execute(wrap(task, clientTrace(), Thread.currentThread().getName()));
    }
    
    @Override
    public Future<?> submit(Runnable task) {
        return super.submit(wrap(task, clientTrace(), Thread.currentThread().getName()));
    }
    
    private Exception clientTrace() {
        return new Exception("Client stack trace");
    }
    
    private Runnable wrap(final Runnable task, final Exception clientStack, String clientThreadName) {
        return new Runnable() {
            @Override
            public void run() {
                try {
                    task.run();
                } catch(Exception e) {
//                    clientStack.printStackTrace();
                    System.out.println("                             1212");
                    throw e;
                }
            }
        };
    }
    public static void main(String[] args) {
        ThreadPoolExecutor s = new Main(0, Integer.MAX_VALUE, 0L, TimeUnit.SECONDS, 
                new SynchronousQueue<Runnable>());
        for (int i = 0; i < 5; i++) {
            s.execute(new DivTask(100, i));
        }
    }
    
}