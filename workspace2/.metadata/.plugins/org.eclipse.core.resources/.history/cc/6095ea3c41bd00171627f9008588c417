package first_maven;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class TreeNode {
     int val;
     TreeNode left;
     TreeNode right;
     TreeNode(int x) { val = x; }
 }

public class TreeDemo {
    void dfs(TreeNode root, int remain, int[] ret, List<Integer> list) {
        if (root == null) {
            return;
        }
        remain -= root.val;
        list.add(root.val);
        Map<Integer, Integer> map = new HashMap<>();
        
        if (remain == 0) {
            ret[0]++;
        }
        dfs(root.left, remain, ret, new ArrayList<>());
        dfs(root.right, remain, ret, list);
        list.remove(list.size() - 1);
    }
    static boolean hasSubtree(TreeNode a, TreeNode b) {
        if (a == null || b == null) {
            return false;
        }
        boolean ret = false;
        if (a.val == b.val) {
            ret = isSame(a, b);
        }
        if (!ret) {
            ret = hasSubtree(a.left, b);
        }
        if (!ret) {
            ret = hasSubtree(a.right, b);
        }
        return ret;
    }
    static boolean isSame(TreeNode a, TreeNode b) {
        if (b == null) {
            return true;
        }
        if ((a == null) || a.val != b.val) {
            return false;
        } 
        return isSame(a.left, b.left) && isSame(a.right, b.right);
    }
    public static void main(String[] args) {
        TreeNode a = new TreeNode(1);
        TreeNode b = new TreeNode(2);
       
    }

}
